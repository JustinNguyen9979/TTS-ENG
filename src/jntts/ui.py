import os
import pyfiglet
import textwrap
import wcwidth
import random
import re

from rich.text import Text
from rich.align import Align
from rich.panel import Panel
from rich.console import Console
from rich.style import Style
from rich.color import Color

console = Console()

# --- H·∫∞NG S·ªê CHO VI·ªÜC V·∫º BOX ---
BOX_CHARS_SINGLE = {
    'top_left': '‚ï≠', 'top_right': '‚ïÆ', 'bottom_left': '‚ï∞', 'bottom_right': '‚ïØ',
    'horizontal': '‚îÄ', 'vertical': '‚îÇ',
}
BOX_CHARS_DOUBLE = {
    'top_left': '‚ïî', 'top_right': '‚ïó', 'bottom_left': '‚ïö', 'bottom_right': '‚ïù',
    'horizontal': '‚ïê', 'vertical': '‚ïë',
}

# --- H·∫∞NG S·ªê M√ÄU S·∫ÆC ---
COLOR_SUCCESS = '\033[92m'
COLOR_WARNING = '\033[93m'
COLOR_RESET = '\033[0m'

VERSION = "v1.1.0 - Developed By Justin Nguyen üáªüá≥"

def clear_screen():
    os.system('cls' if os.name == 'nt' else 'clear')

def _render_and_center_block(block_str):
    """Nh·∫≠n m·ªôt chu·ªói ƒëa d√≤ng, t√≠nh to√°n v√† in n√≥ ra gi·ªØa terminal."""
    try:
        terminal_width = os.get_terminal_size().columns
    except OSError:
        terminal_width = 80
    
    # T√¨m d√≤ng d√†i nh·∫•t trong kh·ªëi ƒë·ªÉ x√°c ƒë·ªãnh chi·ªÅu r·ªông c·ªßa kh·ªëi
    block_width = 0
    if block_str:
        block_width = max(wcwidth.wcswidth(line) for line in block_str.split('\n'))

    # T√≠nh to√°n l·ªÅ tr√°i
    left_padding_str = " " * ((terminal_width - block_width) // 2)

    # S·ª≠ d·ª•ng textwrap.indent ƒë·ªÉ th√™m l·ªÅ v√†o m·ªói d√≤ng c·ªßa kh·ªëi
    centered_block = textwrap.indent(block_str, left_padding_str)
    print(centered_block)

def print_info_box(title, sections):
    """
    V·∫Ω m·ªôt info box ƒë·∫πp m·∫Øt b·∫±ng Rich, ƒë√£ s·ª≠a l·ªói ImportError cho Group.
    """
    clear_screen()
    
    # In ti√™u ƒë·ªÅ ASCII Art c√≥ m√†u
    ascii_art_string = generate_centered_ascii_title(title)
    console.print(Text(ascii_art_string, style="bold bright_cyan"))

    # --- T·∫†O M·ªòT DANH S√ÅCH C√ÅC TH√ÄNH PH·∫¶N C√ì TH·ªÇ RENDER ---
    renderables = []

    all_labels = [label for section in sections.values() for label, value in section]
    if not all_labels: return
    label_width = max(len(label) for label in all_labels)

    first_section = True
    for section_title, data in sections.items():
        if not first_section:
            renderables.append(Text("\n"))
        first_section = False

        section_header = Text(f"--- {section_title.upper()} ---", style="bold magenta")
        renderables.append(Align.center(section_header))
        renderables.append(Text("\n"))
        
        section_content = Text()
        for label, value in data:
            section_content.append(f"{label.ljust(label_width)} : ", style="cyan")
            section_content.append(f"{value}\n")
        
        renderables.append(section_content)

    # --- T·∫†O V√Ä IN PANEL T·ª™ DANH S√ÅCH C√ÅC TH√ÄNH PH·∫¶N ---
    # S·ª¨A L·ªñI IMPORT ·ªû ƒê√ÇY:
    from rich.console import Group # Group n·∫±m trong rich.console

    content_group = Group(*renderables)

    info_panel = Panel(
        content_group,
        border_style="green",
        padding=(1, 2)
    )

    console.print(Align.center(info_panel))


# --- H√ÄM PUBLIC CHO HIGHLIGHT BOX (PHI√äN B·∫¢N RICH) ---
def print_highlight_box(lines, status='success'):
    """V·∫Ω m·ªôt highlight box n·ªïi b·∫≠t b·∫±ng Rich, ƒë√£ s·ª≠a l·ªói TypeError."""
    
    color_map = {'success': 'green', 'warning': 'yellow'}
    icon_map = {'success': '‚úÖ', 'warning': '‚ö†Ô∏è'}
    
    color = color_map.get(status, 'white')
    icon = icon_map.get(status, '‚û°Ô∏è')

    # X√¢y d·ª±ng n·ªôi dung b·∫±ng c√°ch k·∫øt h·ª£p c√°c ƒë·ªëi t∆∞·ª£ng Text
    content = Text()
    
    # D√≤ng 1 v·ªõi icon, cƒÉn l·ªÅ tr√°i (m·∫∑c ƒë·ªãnh)
    content.append(f"{icon} {lines[0]}\n\n", style="bold")
    
    # D√≤ng 2 ƒë∆∞·ª£c t·∫°o ri√™ng v√† cƒÉn gi·ªØa
    # Ch√∫ng ta th√™m m·ªôt ƒë·ªëi t∆∞·ª£ng Text m·ªõi ƒë∆∞·ª£c cƒÉn gi·ªØa v√†o content
    content.append(Text(lines[1], justify="center", style="bold"))

    # T·∫°o Panel v·ªõi vi·ªÅn ƒë√¥i v√† m√†u s·∫Øc
    highlight_panel = Panel(
        content, # Kh√¥ng c·∫ßn Align.center ·ªü ƒë√¢y n·ªØa v√¨ ƒë√£ justify b√™n trong Text
        border_style=f"bold {color}",
        box=box.DOUBLE,
        padding=(1, 5),
        title_align="center"
    )
    
    # In Panel ra gi·ªØa m√†n h√¨nh
    console.print(Align.center(highlight_panel))

from rich import box

def generate_centered_ascii_title(text, font='standard'):
    try:
        terminal_width = os.get_terminal_size().columns
    except OSError:
        terminal_width = 80

    fig = pyfiglet.Figlet(font=font, width=terminal_width)
    banner_text = fig.renderText(text)
    
    lines = banner_text.splitlines()
    centered_lines = [line.center(terminal_width) for line in lines]
    centered_banner = "\n".join(centered_lines)

    return centered_banner

def display_main_menu():
    """Hi·ªÉn th·ªã menu ch√≠nh v·ªõi m√†u s·∫Øc ng·∫´u nhi√™n."""
    clear_screen()
    
    bright_colors = [
        # --- C√°c m√†u s√°ng c∆° b·∫£n (t∆∞∆°ng ph·∫£n cao) ---
        "bright_cyan",
        "bright_magenta",
        "bright_yellow",
        "bright_green",
        "bright_blue",
        "bright_red",
        
        # --- C√°c m√†u t√¥ng L·ª•c v√† Lam (Greens & Blues) ---
        "spring_green1",
        "spring_green2",
        "sea_green1",
        "turquoise2",
        "deep_sky_blue1",
        "dodger_blue1",
        "steel_blue1",
        
        # --- C√°c m√†u t√¥ng V√†ng v√† Cam (Yellows & Oranges) ---
        "gold1",
        "dark_orange",
        "orange1",
        "light_goldenrod1",
        
        # --- C√°c m√†u t√¥ng ƒê·ªè v√† H·ªìng (Reds & Pinks) ---
        "light_coral",
        "indian_red1",
        "hot_pink",
        "deep_pink1",
        
        # --- C√°c m√†u t√¥ng T√≠m (Purples) ---
        "medium_purple",
        "orchid",
        "blue_violet"
    ]

    # Ch·ªçn m·ªôt m√†u ng·∫´u nhi√™n t·ª´ danh s√°ch tr√™n
    random_color = random.choice(bright_colors)

    # In ti√™u ƒë·ªÅ ASCII Art v·ªõi m√†u ng·∫´u nhi√™n
    ascii_title = generate_centered_ascii_title("TOOL TEXT TO SPEECH")
    console.print(Text(ascii_title, style=f"bold {random_color}"))
    
    # In phi√™n b·∫£n
    console.print(Align.center(Text(VERSION, style="italic dim")))

    # --- X√ÇY D·ª∞NG N·ªòI DUNG MENU B·∫∞NG RICH ---
    menu_items = [
        "Nghe th·ª≠ gi·ªçng n√≥i (Box Voice)",
        "T·∫°o gi·ªçng n√≥i (Text To Speech)",
        "Nh√¢n b·∫£n gi·ªçng n√≥i (Clone Voice)",
        "Chuy·ªÉn gi·ªçng n√≥i th√†nh vƒÉn b·∫£n (Transcribe Audio)",
        "Ki·ªÉm tra ph·∫ßn c·ª©ng (Check CPU/GPU)",
        "Th√¥ng tin & Gi·ªõi thi·ªáu (About)"
    ]

    menu_content = Text()
    for i, item in enumerate(menu_items):
        # ƒê·ªãnh d·∫°ng s·ªë v√† m·ª•c menu v·ªõi c√°c m√†u kh√°c nhau
        menu_content.append(f"  [", style="default")
        menu_content.append(str(i + 1), style=f"bold {random_color}")
        menu_content.append(f"]. {item}\n\n", style="default")

    # Th√™m l·ª±a ch·ªçn tho√°t
    menu_content.append(f"  [", style="default")
    menu_content.append("0", style=f"bold {random_color}")
    menu_content.append(f"]. Tho√°t ch∆∞∆°ng tr√¨nh (Exit)\n", style="default")

    # T·∫°o m·ªôt Panel (h·ªôp) ƒë·ªÉ ch·ª©a menu
    menu_panel = Panel(
        menu_content,
        border_style=random_color, # Vi·ªÅn c·ªßa h·ªôp c≈©ng c√≥ m√†u ng·∫´u nhi√™n
        title="[bold]CH·ªåN CH·ª®C NƒÇNG[/bold]",
        title_align="center",
        padding=(1, 2)
    )

    # In menu ra gi·ªØa m√†n h√¨nh
    console.print(Align.center(menu_panel))

def display_selection_menu(title, options, color="cyan", back_option="Quay l·∫°i menu tr∆∞·ªõc"):
    """
    Hi·ªÉn th·ªã m·ªôt menu l·ª±a ch·ªçn chung v·ªõi phong c√°ch ƒë∆°n gi·∫£n v√† ƒë√°ng tin c·∫≠y,
    gi·ªëng h·ªát nh∆∞ menu ch√≠nh ƒë·ªÉ ƒë·∫£m b·∫£o t√≠nh ·ªïn ƒë·ªãnh tuy·ªát ƒë·ªëi.
    """
    # X√¢y d·ª±ng n·ªôi dung menu b·∫±ng Text object.
    menu_content = Text()
    
    for i, item in enumerate(options):
        # Chuy·ªÉn ƒë·ªïi item th√†nh chu·ªói ƒë·ªÉ x·ª≠ l√Ω nh·∫•t qu√°n
        if isinstance(item, tuple):
            # N·∫øu l√† tuple ('key', 'value'), gh√©p ch√∫ng l·∫°i th√†nh m·ªôt chu·ªói
            item_text = f"{item[0]:<12} - {item[1]}"
        else:
            # N·∫øu l√† chu·ªói, x√≥a s·ªë th·ª© t·ª± c≈© (n·∫øu c√≥)
            item_text = re.sub(r'^\d+\.\s*', '', str(item))
        
        # Th√™m t·ª´ng d√≤ng l·ª±a ch·ªçn v√†o menu
        menu_content.append(f"  [", style="default")
        menu_content.append(str(i + 1), style=f"bold {color}")
        menu_content.append(f"]. {item_text}\n\n", style="default")

    # Th√™m l·ª±a ch·ªçn quay l·∫°i
    menu_content.append(f"  [", style="default")
    menu_content.append("0", style=f"bold {color}")
    menu_content.append(f"]. {back_option}\n", style="default")

    # ƒê·∫∑t n·ªôi dung v√†o trong m·ªôt Panel
    menu_panel = Panel(
        menu_content,
        title=f"[bold]{title}[/bold]",
        title_align="center",
        border_style=color,
        padding=(1, 2)
    )
    
    # In Panel ra gi·ªØa m√†n h√¨nh
    console.print(Align.center(menu_panel))
    
    # L·∫•y l·ª±a ch·ªçn c·ªßa ng∆∞·ªùi d√πng
    choice = input(f"\nNh·∫≠p l·ª±a ch·ªçn c·ªßa b·∫°n (00 ƒë·ªÉ v·ªÅ menu ch√≠nh): ")
    return choice