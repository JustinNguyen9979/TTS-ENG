import os
import pyfiglet
import textwrap
import wcwidth

from rich.console import Console
from rich.panel import Panel
from rich.text import Text
from rich.align import Align

console = Console()

# --- H·∫∞NG S·ªê CHO VI·ªÜC V·∫º BOX ---
BOX_CHARS_SINGLE = {
    'top_left': '‚ï≠', 'top_right': '‚ïÆ', 'bottom_left': '‚ï∞', 'bottom_right': '‚ïØ',
    'horizontal': '‚îÄ', 'vertical': '‚îÇ',
}
BOX_CHARS_DOUBLE = {
    'top_left': '‚ïî', 'top_right': '‚ïó', 'bottom_left': '‚ïö', 'bottom_right': '‚ïù',
    'horizontal': '‚ïê', 'vertical': '‚ïë',
}

# --- H·∫∞NG S·ªê M√ÄU S·∫ÆC ---
COLOR_SUCCESS = '\033[92m'
COLOR_WARNING = '\033[93m'
COLOR_RESET = '\033[0m'

VERSION = "v1.1.0 - Developed By Justin Nguyen üáªüá≥"

def clear_screen():
    os.system('cls' if os.name == 'nt' else 'clear')

def _render_and_center_block(block_str):
    """Nh·∫≠n m·ªôt chu·ªói ƒëa d√≤ng, t√≠nh to√°n v√† in n√≥ ra gi·ªØa terminal."""
    try:
        terminal_width = os.get_terminal_size().columns
    except OSError:
        terminal_width = 80
    
    # T√¨m d√≤ng d√†i nh·∫•t trong kh·ªëi ƒë·ªÉ x√°c ƒë·ªãnh chi·ªÅu r·ªông c·ªßa kh·ªëi
    block_width = 0
    if block_str:
        block_width = max(wcwidth.wcswidth(line) for line in block_str.split('\n'))

    # T√≠nh to√°n l·ªÅ tr√°i
    left_padding_str = " " * ((terminal_width - block_width) // 2)

    # S·ª≠ d·ª•ng textwrap.indent ƒë·ªÉ th√™m l·ªÅ v√†o m·ªói d√≤ng c·ªßa kh·ªëi
    centered_block = textwrap.indent(block_str, left_padding_str)
    print(centered_block)

# --- H√ÄM MASTER ƒê·ªÇ V·∫º BOX (PRIVATE) ---
def _draw_box_wrapper(content_lines, box_chars, color_code=COLOR_RESET, inner_padding=2):
    """H√†m l√µi, ch·ªãu tr√°ch nhi·ªám t√≠nh to√°n v√† v·∫Ω m·ªçi lo·∫°i box."""
    
    # Helper ƒë·ªÉ t√≠nh chi·ªÅu r·ªông hi·ªÉn th·ªã th·ª±c t·∫ø c·ªßa chu·ªói (h·ªó tr·ª£ emoji)
    def display_width(s):
        return wcwidth.wcswidth(s)

    if not content_lines:
        return

    content_width = max(display_width(line) for line in content_lines)
    box_width = content_width + (inner_padding * 2) + 2 # +2 cho vi·ªÅn d·ªçc

    try:
        terminal_width = os.get_terminal_size().columns
    except OSError:
        terminal_width = 80
        
    left_padding_str = " " * ((terminal_width - box_width) // 2)

    # V·∫Ω vi·ªÅn tr√™n
    top_border = box_chars['top_left'] + (box_chars['horizontal'] * (box_width - 2)) + box_chars['top_right']
    print(color_code + left_padding_str + top_border + COLOR_RESET)

    # V·∫Ω n·ªôi dung
    for line in content_lines:
        line_padding_right = " " * (content_width - display_width(line))
        padded_line = f"{' ' * inner_padding}{line}{line_padding_right}{' ' * inner_padding}"
        print(color_code + left_padding_str + box_chars['vertical'] + padded_line + box_chars['vertical'] + COLOR_RESET)

    # V·∫Ω vi·ªÅn d∆∞·ªõi
    bottom_border = box_chars['bottom_left'] + (box_chars['horizontal'] * (box_width - 2)) + box_chars['bottom_right']
    print(color_code + left_padding_str + bottom_border + COLOR_RESET)


def print_info_box(title, sections):
    """
    V·∫Ω m·ªôt info box ƒë·∫πp m·∫Øt b·∫±ng Rich, ƒë√£ s·ª≠a l·ªói ImportError cho Group.
    """
    clear_screen()
    
    # In ti√™u ƒë·ªÅ ASCII Art c√≥ m√†u
    ascii_art_string = generate_centered_ascii_title(title)
    console.print(Text(ascii_art_string, style="bold bright_cyan"))

    # --- T·∫†O M·ªòT DANH S√ÅCH C√ÅC TH√ÄNH PH·∫¶N C√ì TH·ªÇ RENDER ---
    renderables = []

    all_labels = [label for section in sections.values() for label, value in section]
    if not all_labels: return
    label_width = max(len(label) for label in all_labels)

    first_section = True
    for section_title, data in sections.items():
        if not first_section:
            renderables.append(Text("\n"))
        first_section = False

        section_header = Text(f"--- {section_title.upper()} ---", style="bold magenta")
        renderables.append(Align.center(section_header))
        renderables.append(Text("\n"))
        
        section_content = Text()
        for label, value in data:
            section_content.append(f"{label.ljust(label_width)} : ", style="cyan")
            section_content.append(f"{value}\n")
        
        renderables.append(section_content)

    # --- T·∫†O V√Ä IN PANEL T·ª™ DANH S√ÅCH C√ÅC TH√ÄNH PH·∫¶N ---
    # S·ª¨A L·ªñI IMPORT ·ªû ƒê√ÇY:
    from rich.console import Group # Group n·∫±m trong rich.console

    content_group = Group(*renderables)

    info_panel = Panel(
        content_group,
        border_style="green",
        padding=(1, 2)
    )

    console.print(Align.center(info_panel))


# --- H√ÄM PUBLIC CHO HIGHLIGHT BOX (PHI√äN B·∫¢N RICH) ---
def print_highlight_box(lines, status='success'):
    """V·∫Ω m·ªôt highlight box n·ªïi b·∫≠t b·∫±ng Rich, ƒë√£ s·ª≠a l·ªói TypeError."""
    
    color_map = {'success': 'green', 'warning': 'yellow'}
    icon_map = {'success': '‚úÖ', 'warning': '‚ö†Ô∏è'}
    
    color = color_map.get(status, 'white')
    icon = icon_map.get(status, '‚û°Ô∏è')

    # X√¢y d·ª±ng n·ªôi dung b·∫±ng c√°ch k·∫øt h·ª£p c√°c ƒë·ªëi t∆∞·ª£ng Text
    content = Text()
    
    # D√≤ng 1 v·ªõi icon, cƒÉn l·ªÅ tr√°i (m·∫∑c ƒë·ªãnh)
    content.append(f"{icon} {lines[0]}\n\n", style="bold")
    
    # D√≤ng 2 ƒë∆∞·ª£c t·∫°o ri√™ng v√† cƒÉn gi·ªØa
    # Ch√∫ng ta th√™m m·ªôt ƒë·ªëi t∆∞·ª£ng Text m·ªõi ƒë∆∞·ª£c cƒÉn gi·ªØa v√†o content
    content.append(Text(lines[1], justify="center", style="bold"))

    # T·∫°o Panel v·ªõi vi·ªÅn ƒë√¥i v√† m√†u s·∫Øc
    highlight_panel = Panel(
        content, # Kh√¥ng c·∫ßn Align.center ·ªü ƒë√¢y n·ªØa v√¨ ƒë√£ justify b√™n trong Text
        border_style=f"bold {color}",
        box=box.DOUBLE,
        padding=(1, 5),
        title_align="center"
    )
    
    # In Panel ra gi·ªØa m√†n h√¨nh
    console.print(Align.center(highlight_panel))

from rich import box

def generate_centered_ascii_title(text, font='standard'):
    try:
        terminal_width = os.get_terminal_size().columns
    except OSError:
        terminal_width = 80

    fig = pyfiglet.Figlet(font=font, width=terminal_width)
    banner_text = fig.renderText(text)
    
    lines = banner_text.splitlines()
    centered_lines = [line.center(terminal_width) for line in lines]
    centered_banner = "\n".join(centered_lines)

    return centered_banner

def display_main_menu():
    clear_screen()
    
    print(generate_centered_ascii_title("TOOL TEXT TO SPEECH"))
    
    try:
        terminal_width = os.get_terminal_size().columns
    except OSError:
        terminal_width = 79
    
    menu_items = [
        "Nghe th·ª≠ gi·ªçng n√≥i (Box Voice)",
        "T·∫°o gi·ªçng n√≥i (Text To Speech)",
        "Nh√¢n b·∫£n gi·ªçng n√≥i (Clone Voice)",
        "Chuy·ªÉn gi·ªçng n√≥i th√†nh vƒÉn b·∫£n (Transcribe Audio)",
        "Ki·ªÉm tra ph·∫ßn c·ª©ng (Check CPU/GPU)",
        "Th√¥ng tin & Gi·ªõi thi·ªáu (About)"
    ]
        
    print(f"{VERSION.center(terminal_width)}")
    print("\n" + "=" * terminal_width)
    for i, item in enumerate(menu_items):
        print(f"\n  [{i+1}]. {item}")
    print("\n  [0]. Tho√°t ch∆∞∆°ng tr√¨nh (Exit)")
    print("\n" + "=" * terminal_width)